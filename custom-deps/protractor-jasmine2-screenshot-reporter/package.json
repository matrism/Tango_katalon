{
  "name": "protractor-jasmine2-screenshot-reporter",
  "version": "0.1.7",
  "description": "Use the screenshot reporter to capture screenshots after each executed Protractor test case.",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mlison/protractor-jasmine2-screenshot-reporter.git"
  },
  "dependencies": {
    "hat": "0.0.3",
    "lodash": "^3.0.0",
    "mkdirp": "^0.5.0",
    "string.prototype.startswith": "^0.2.0"
  },
  "keywords": [
    "screenshot",
    "jasmine",
    "jasmine2",
    "protractor",
    "selenium",
    "reporter",
    "html"
  ],
  "author": {
    "name": "michal.lison@nitor.fi"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mlison/protractor-jasmine2-screenshot-reporter/issues"
  },
  "homepage": "https://github.com/mlison/protractor-jasmine2-screenshot-reporter",
  "contributors": [
    {
      "name": "Antti Arponen",
      "email": "antti.arponen@rovio.com"
    },
    {
      "name": "Alex Novikov",
      "email": "alex@asnovikov.ru",
      "url": "http://www.asnovikov.ru/"
    },
    {
      "name": "Sandeep Adinarayana"
    }
  ],
  "scripts": {},
  "readme": "## Protractor screenshot reporter for Jasmine2\n[![npm version](https://badge.fury.io/js/protractor-jasmine2-screenshot-reporter.svg)](http://badge.fury.io/js/protractor-jasmine2-screenshot-reporter)\n\nReporter for Protractor that will capture a screenshot after each executed test case and store the results in a HTML report.\n(supports jasmine2)\n\n## Usage\nThe <code>protractor-jasmine2-screenshot-reporter</code> is available via npm:\n\n<code>$ npm install protractor-jasmine2-screenshot-reporter --save-dev</code>\n\nIn your Protractor configuration file, register protractor-jasmine2-screenshot-reporter in jasmine:\n\n<pre><code>var HtmlScreenshotReporter = require('protractor-jasmine2-screenshot-reporter');\n\nexports.config = {\n   // ...\n\n   onPrepare: function() {\n      jasmine.getEnv().addReporter(\n        new HtmlScreenshotReporter({\n          dest: 'target/screenshots',\n          filename: 'my-report.html'\n        })\n      );\n   }\n}</code></pre>\n\n## Options\n### Destination directory\n\nOutput directory for created files. All screenshots and reports will be stored here.\n\nIf the directory doesn't exist, it will be created automatically or otherwise cleaned before running the test suite.\n\n<pre><code>jasmine.getEnv().addReporter(new HtmlScreenshotReporter({\n   dest: '/project/test/screenshots'\n}));</code></pre>\n\n### Filename (optional)\n\nFilename for html report.\n\n<pre><code>jasmine.getEnv().addReporter(new HtmlScreenshotReporter({\n   filename: 'my-report.html'\n}));</code></pre>\n\nDefault is <code>report.html</code>\n\n### Ignore pending specs (optional)\n\nWhen this option is enabled, reporter will not create screenshots for pending / disabled specs. Only executed specs will be captured.\n\n<pre><code>jasmine.getEnv().addReporter(new HtmlScreenshotReporter({\n   ignoreSkippedSpecs: true\n}));</code></pre>\n\nDefault is <code>false</code>\n\n### Capture only failed specs (optional)\n\nWhen this option is enabled, reporter will create screenshots only for specs that have failed their expectations.\n\n<pre><code>jasmine.getEnv().addReporter(new HtmlScreenshotReporter({\n   captureOnlyFailedSpecs: true\n}));</code></pre>\n\nDefault is <code>false</code>\n\n### Report only failed specs (optional)\n\nThis option is __enabled by default__ - in combination with <code>captureOnlyFailedSpecs</code>, it will capture and report screenshots only for failed specs. Turning this option off will cause the report to contain all specs, but screenshots will be captured only for failed specs.\n\n<pre><code>jasmine.getEnv().addReporter(new HtmlScreenshotReporter({\n   reportOnlyFailedSpecs: false,\n   captureOnlyFailedSpecs: true\n}));</code></pre>\n\n### Path Builder (optional)\n\nFunction used to build custom paths for screenshots. For example:\n\n<pre><code>jasmine.getEnv().addReporter(new HtmlScreenshotReporter({\n   pathBuilder: function(currentSpec, suites, browserCapabilities) {\n      // will return chrome/your-spec-name.png\n      return browserCapabilities.get('browserName') + '/' + currentSpec.fullName;\n   }\n}));</code></pre>\n\nBy default, the path builder will generate a random ID for each spec.\n\n### Metadata Builder (optional)\n\nFunction used to build custom metadata objects for each spec. Files (json) will use the same filename and path as created by Path Builder.\nFor example:\n\n<pre><code>jasmine.getEnv().addReporter(new ScreenShotReporter({\n   metadataBuilder: function(currentSpec, suites, browserCapabilities) {\n      return { id: currentSpec.id, os: browserCapabilities.get('browserName') };\n   }\n}));</code></pre>\n\nBy default, the runner builder will not save any metadata except the actual html report.\n",
  "readmeFilename": "README.md",
  "_id": "protractor-jasmine2-screenshot-reporter@0.1.7",
  "_from": "protractor-jasmine2-screenshot-reporter@>=0.1.7 <0.2.0"
}

<script src="http://code.jquery.com/jquery-1.11.3.min.js"></script>

<div class="tatHeader">
    <table class="tatHeaderTable">
        <tr>
            <td>
                <p>
                    Included tags:
                    {{#if includedTagsString}}
                        {{includedTagsString}}.
                    {{else}}
                        all.
                    {{/if}}
                </p>
                <p>
                    Excluded tags:
                    {{#if excludedTagsString}}
                        {{excludedTagsString}}.
                    {{else}}
                        none.
                    {{/if}}
                </p>
                <p>
                    Total feature files:
                    <span class="tatTotalFeatures"></span>
                    (<span class="tatTotalFeaturesPassed passed"></span>
                    / <span class="tatTotalFeaturesFailed failed"></span>).
                </p>
                <p>
                    Total scenarios:
                    <span class="tatTotalScenarios"></span>
                    (<span class="tatTotalScenariosPassed passed"></span>
                    / <span class="tatTotalScenariosFailed failed"></span>).
                </p>
                <p>
                    Total steps:
                    <span class="tatTotalSteps"></span>
                    (<span class="tatTotalStepsPassed passed"></span>
                    / <span class="tatTotalStepsFailed failed"></span>).
                </p>
                <p>
                    <input type="text" id="tagSearch" placeholder="tag search" />
                </p>
                <p>
                    <input type="checkbox" id="showOnlyPassing" /> <span style="color: green;">✓</span> Show Only Passing
                    <input type="checkbox" id="showOnlyFailing" /> <span style="color: red;">✗</span> Show Only Failing
                </p>
                <p>
                    <button id="tatExpandAll">
                        Expand all
                    </button>
                    <button id="tatCollapseAll">
                        Collapse all
                    </button>
                </p>
            </td>
            <td>
                {{#if buildNumber}}
                    <p>
                        Build number:
                        <select id="tatBuildNumber">
                            <option>{{buildNumber}}</option>
                        </select>
                        (<a id="tatGoToNextReport" target="_top">Next</a>).
                    </p>
                {{/if}}
                <p>
                    Start date:
                    <time id="tatStartDate" datetime="{{isoStartDate}}">{{startDate}}{{#if timezone}} {{timezone}}{{/if}}</time>.
                </p>
                <p>
                    End date:
                    <time datetime="{{isoEndDate}}">{{endDate}}{{#if timezone}} {{timezone}}{{/if}}</time>.
                </p>
                <p>
                    Total time: {{duration}}.
                </p>
                <p>
                    Target environment: {{env.name}}
                    (<a href="{{env.url}}">{{env.url}}</a>).
                </p>
                <p>
                    Source branch:
                    {{#if branch}}
                        {{branch}}
                        (<a href="https://github.com/wmgdsp/tango-app/commit/{{commit.hash}}">{{commit.shortHash}}</a>).
                    {{else}}
                        unknown.
                    {{/if}}
                </p>
            </td>
        </tr>
    </table>
</div>
<style>
    .tatHeader {
        border-bottom: 1px solid lightgray;
        padding-bottom: 1.3;
    }

    .tatHeaderTable td {
        border: 10px solid transparent;
        vertical-align: top;
    }

    .tatTotalFeaturesPassed, .tatTotalFeaturesFailed,
    .tatTotalScenariosPassed, .tatTotalScenariosFailed,
    .tatTotalStepsPassed, .tatTotalStepsFailed {
        padding: 0;
    }

    h4 {
        display: inline-block;
    }

    h4:before {
        padding-left: 16px;
        padding-right: 12px;
    }

    ul.passed, ul.failed {
        color: inherit;
    }

    ul.passed > h4:before {
        content: '✓';
        color: green;
    }

    ul.failed > h4:before {
        content: '✗';
        color: red;
    }

    .toggle {
        position: relative;
        top: -2px;
        width: 32px;
    }

    .toggle:before {
        content: '+';
    }

    .toggle.active:before {
        content: '–';
    }

    ul.hide, .feature.checkhide, .feature.searchhide {
        display: none !important;
    }
</style>
<script>
    'use strict';

    window.tat = {};

    tat.buildNumber = parseInt($('#tatBuildNumber').val());
</script>
<script>
    'use strict';

    // Allow navigation to previous reports and to the next one.
    var $select;

    function reportUrlFromBuildNumber(number) {
        return top.location.href.replace(
            /(\/[0-9]+)?\/HTML_Report\//, '/' + number + '/HTML_Report/'
        );
    }

    $('#tatGoToNextReport').attr(
        'href', reportUrlFromBuildNumber(tat.buildNumber + 1)
    );

    $select = $('#tatBuildNumber');

    for(var i = tat.buildNumber - 1; i > 0; --i) {
        $select.append($('<option>').text(i));
    }

    $select.change(function() {
        var $this = $(this);

        top.location.href = reportUrlFromBuildNumber($this.val());
    });
</script>
<script>
    'use strict';

    // Open screenshots in new tabs.
    $('li > a').attr('target', '_blank');
</script>
<script>
    'use strict';

    // Add links to HTML snapshots.
    $('li > a').each(function(i) {
        var $this = $(this);

        $this.after(
            document.createTextNode(' ('),
            $('<a>').attr('href', i + '.html').text('HTML'),
            document.createTextNode(')')
        );
    });

    // Remove repeated list description prefixes.
    $('ul > h4').each(function() {
        var $this = $(this),
            prefix = $this.text().replace(/\(.+\)$/, ''),

            $list = $this.closest('ul');

        $list.find('ul > h4').each(function() {
            var $this = $(this),
                text = $this.text();

            if(text.startsWith(prefix)) {
                $this.text(text.slice(prefix.length));
            }
        });
    });
</script>
<script>
    'use strict';

    // Add classes from test tags.
    $('ul').each(function() {
        var $this = $(this);

        $this.addClass(function() {
            var listDescription = $this.children('h4').text(),
                reResults = /Tags: '(.+)'\. \(.+\)$/.exec(listDescription),
                tags;

            if(!reResults) {
                return '';
            }

            tags = (
                reResults[1]
                    .replace(/[ ']/g, '')
                    .split(',')
                    .map(function(tag) {
                        return 'tatTag__' + tag;
                    })
            );

            return tags.join(' ');
        }());
    });

    // add feature class to feature level uls
    $('h4:contains("eature steps")').each(function () {
        var $this = $(this);

        $this.parent('ul').parent('ul').addClass('feature');
    });
</script>
</script>
<script>
    'use strict';

    // Group lists by component tags.
    var componentTags = {
            copyrightRegistration: 'Copyright Registration',
            dataUtilities: 'Data Utilities',
            deals: 'Deals',
            financialInterfaces: 'Financial Interfaces',
            incomeManagement: 'incomeManagement',
            orgs: 'Organisations',
            payees: 'Payees',
            person: 'Person',
            royaltyProcessing: 'Royalty Processing',
            royaltyRates: 'Royalty Rates',
            works: 'Works',
            unknown: 'Unknown'
        },

        componentTagNames = Object.keys(componentTags),

        $newBody = $('<div>');

    componentTagNames.forEach(function(name) {
        var tagData = {
                description: componentTags[name]
            },

            $ul = $('<ul>');

        $ul.append($('<h4>').text(tagData.description));

        tagData.$ul = $ul;

        componentTags[name] = tagData;
    });

    $('body > ul').each(function() {
        var $this = $(this);

        componentTagNames.some(function(name) {
            var tagData = componentTags[name],
                $ul = tagData.$ul;

            if(
                name === 'unknown' ||
                $this.find('.tatTag__' + name).length !== 0
            ) {
                $ul.append($this);
                return true;
            }
        });
    });

    componentTagNames.forEach(function(name) {
        var tagData = componentTags[name],
            $ul = tagData.$ul;

        if($ul.children('ul').length === 0) {
            return;
        }

        $('body').append(tagData.$ul);
    });
</script>
<script>
    'use strict';

    // Add list status (passed or failed) class.
    $('ul').each(function() {
        var $this = $(this);

        $this.addClass(
            $this.find('.failed').length === 0
                ? 'passed'
                : 'failed'
        );
    });
</script>
<script>
    'use strict';

    // Add list expand / collapse toggle.
    $('ul').each(function() {
        var $this = $(this);

        $this.prepend($('<button>').addClass('toggle active'));
    });

    // Setup list toggles click handler.
    $('body').on('click', '.toggle', function() {
        var $this = $(this),
            $listItems = $this.closest('ul').children('ul, li');

        $this.toggleClass('active');

        if($this.hasClass('active')) {
            $listItems.show();
        }
        else {
            $listItems.hide();
        }
    });

    // Setup expand / collapse all click handlers.
    $('#tatExpandAll').click(function() {
        $('.toggle').removeClass('active').click();
    });

    $('#tatCollapseAll').click(function() {
        $('.toggle').addClass('active').click();
    });

    // Collapse all lists.
    $('.toggle').click();
</script>
<script>
    'use strict';

    function searchOrCheckHiddenElementPredicate() {
        var selector = '.searchhide, .checkhide';

        return (
            $(this).closest(selector).addBack(selector).length === 0
        );
    }

    function siblingMatchesPredicate(selector) {
        return function() {
            return ($(this).siblings(selector).length !== 0);
        };
    }

    function calculateTotals() {
        // Count total steps
        var featureLists = $('body > ul > ul').filter(
                searchOrCheckHiddenElementPredicate
            ),

            scenarioLists = featureLists.children('ul').filter(
                searchOrCheckHiddenElementPredicate
            ),

            stepLinks = $('li > a:first-of-type').filter(
                searchOrCheckHiddenElementPredicate
            );

        $('.tatTotalFeatures').text(featureLists.length);

        $('.tatTotalFeaturesPassed').text(
            featureLists.filter('.passed').length + ' ✓'
        );

        $('.tatTotalFeaturesFailed').text(
            featureLists.filter('.failed').length + ' ✗'
        );

        $('.tatTotalScenarios').text(scenarioLists.length);

        $('.tatTotalScenariosPassed').text(
            scenarioLists.filter('.passed').length + ' ✓'
        );

        $('.tatTotalScenariosFailed').text(
            scenarioLists.filter('.failed').length + ' ✗'
        );

        $('.tatTotalSteps').text(stepLinks.length);

        $('.tatTotalStepsPassed').text(
            stepLinks.filter(siblingMatchesPredicate('span.passed')).length + ' ✓'
        );

        $('.tatTotalStepsFailed').text(
            stepLinks.filter(siblingMatchesPredicate('span.failed')).length + ' ✗'
        );
    }

    calculateTotals();
</script>
<script>
    'use strict';

    // ul check to hide parent ul's with no visible children ul
    function checkLists() {
        $('ul.feature').each(function () {
            var $this = $(this).parent('ul');

            // checks # of hidden features from either search or check filters
            if ($this.children('ul').length === $this.children('.searchhide, .checkhide').length) {
                $this.addClass('hide');
            } else {
                $this.removeClass('hide');
            }

            var $parents = $this.parent('ul');

            // checks number of sub ul's that are hidden
            if ($parents.children('ul').length === $parents.children('.hide').length) {
                $parents.addClass('hide');
            } else {
                $parents.removeClass('hide');
            }
        })
    }

    function updateLocationHash() {
        top.location.hash = [
            $('#tagSearch').val(),
            $('#showOnlyPassing').prop('checked')? 'passing' : '',
            $('#showOnlyFailing').prop('checked')? 'failing' : ''
        ].join(',');
    }

    // tag search
    $('#tagSearch').on('input', function () {
        var val = $('#tagSearch').val();

        if (val) {
            $('ul.feature').addClass('searchhide');
            $('ul[class*="tatTag__' + val + '"]').removeClass('searchhide');
        } else {
            $('ul.feature').removeClass('searchhide');
        }

        checkLists();
        calculateTotals();
        updateLocationHash();
    });

    // Filter passing/failing tests
    $("#showOnlyFailing").click(function () {
        if ($('#showOnlyPassing:checkbox:checked').length > 0) {
            $('#showOnlyPassing').prop('checked', false);
        }

        var isChecked = $('#showOnlyFailing:checkbox:checked').length > 0;
        $('ul').each(function () {
            var $this = $(this);

            if (isChecked) {
                $this.find('.feature.failed').removeClass('checkhide');
                $this.find('.feature.passed').addClass('checkhide');
            } else {
                $this.find('.feature.passed').removeClass('checkhide');
            }
        });

        checkLists();
        calculateTotals();
        updateLocationHash();
    });

    $("#showOnlyPassing").click(function () {
        if ($('#showOnlyFailing:checkbox:checked').length > 0) {
            $('#showOnlyFailing').prop('checked', false);
        }

        var isChecked = $('#showOnlyPassing:checkbox:checked').length > 0;
        $('ul').each(function () {
            var $this = $(this);

            if (isChecked) {
                $this.find('.feature.passed').removeClass('checkhide');
                $this.find('.feature.failed').addClass('checkhide');
            } else {
                $this.find('.feature.failed').removeClass('checkhide');
            }
        });

        checkLists();
        calculateTotals();
        updateLocationHash();
    });

    // Parse location hash once
    (function() {
        var hashSlices,
            searchTerms = '',
            onlyPassing = false,
            onlyFailing = false;

        if(!top.location.hash) {
            return;
        }

        hashSlices = top.location.hash.slice(1).split(',');

        searchTerms = hashSlices[0];
        onlyPassing = hashSlices[1];
        onlyFailing = hashSlices[2];

        $('#tagSearch').val(searchTerms).trigger('input');

        if(onlyPassing) {
            $('#showOnlyPassing').click();
        }

        if(onlyFailing) {
            $('#showOnlyFailing').click();
        }
    })();
</script>

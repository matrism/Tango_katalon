<div class="tatHeader">
    <p>
        Start date:
        <time datetime="{{isoStartDate}}">{{startDate}}</time>.
    </p>
    <p>
        End date:
        <time datetime="{{isoEndDate}}">{{endDate}}</time>.
    </p>
    <p>
        Total time: {{duration}}.
    </p>
    <p>
        Target environment: {{env.name}}
        (<a href="{{env.url}}">{{env.url}}</a>).
    </p>
    <p>
        Source branch:
        {{#if branch}}
            {{branch}}.
        {{else}}
            unknown.
        {{/if}}
    </p>
    <p>
        Included tags:
        {{#if includedTagsString}}
            {{includedTagsString}}.
        {{else}}
            all.
        {{/if}}
    </p>
    <p>
        Excluded tags:
        {{#if excludedTagsString}}
            {{excludedTagsString}}.
        {{else}}
            none.
        {{/if}}
    </p>
    <p>
        Total steps:
        <span class="tatTotalSteps"></span>
        (<span class="tatTotalPassed passed"></span>
        / <span class="tatTotalFailed failed"></span>).
    </p>
</div>
<style>
    .tatTotalPassed, .tatTotalFailed {
        padding: 0;
    }

    h4 {
        display: inline-block;
    }

    h4:before {
        padding-left: 16px;
        padding-right: 12px;
    }

    ul.passed, ul.failed {
        color: inherit;
    }

    ul.passed > h4:before {
        content: '✓';
        color: green;
    }

    ul.failed > h4:before {
        content: '✗';
        color: red;
    }

    .toggle {
        position: relative;
        top: -2px;
        width: 32px;
    }

    .toggle:before {
        content: '+';
    }

    .toggle.active:before {
        content: '–';
    }
</style>
<script>
    'use strict';

    // Load jQuery.
    document.querySelector('head').appendChild(function() {
        var script = document.createElement('script');

        script.type = 'text/javascript';
        script.src = 'http://code.jquery.com/jquery-1.11.3.min.js';

        return script;
    }());

    // Wait for it to load.
    (function() {
        var interval = setInterval(function() {
            if(window.jQuery) {
                clearInterval(interval);
                jQueryLoaded();
            }
        }, 50);
    })();

    // This is called when it's loaded.
    function jQueryLoaded() {
        // Open screenshots in new tabs.
        $('li > a').attr('target', '_blank');

        // Add classes from test tags.
        $('ul').each(function() {
            var $this = $(this);

            $this.addClass(function() {
                var listDescription = $this.children('h4').text(),
                    reResults = /Tags: '(.+)'\. \(.+\)$/.exec(listDescription),
                    tags;

                if(!reResults) {
                    return '';
                }

                tags = (
                    reResults[1]
                        .replace(/[ ']/g, '')
                        .split(',')
                        .map(function(tag) {
                            return 'tatTag__' + tag;
                        })
                );

                return tags.join(' ');
            }());
        });

        // Group lists by component tags.
        (function() {
            var componentTags = {
                    copyrightRegistration: 'Copyright Registration',
                    dataUtilities: 'Data Utilities',
                    deals: 'Deals',
                    financialInterfaces: 'Financial Interfaces',
                    incomeManagement: 'incomeManagement',
                    payees: 'Payees',
                    royaltyProcessing: 'Royalty Processing',
                    royaltyRates: 'Royalty Rates',
                    works: 'Works',
                    unknown: 'Unknown'
                },

                componentTagNames = Object.keys(componentTags),

                $newBody = $('<div>');

            componentTagNames.forEach(function(name) {
                var tagData = {
                        description: componentTags[name]
                    },

                    $ul = $('<ul>');

                $ul.append($('<h4>').text(tagData.description));

                tagData.$ul = $ul;

                componentTags[name] = tagData;
            });

            $('body > ul').each(function() {
                var $this = $(this);

                componentTagNames.some(function(name) {
                    var tagData = componentTags[name],
                        $ul = tagData.$ul;

                    if(
                        name === 'unknown' ||
                        $this.find('.tatTag__' + name).length !== 0
                    ) {
                        $ul.append($this);
                        return true;
                    }
                });
            });

            componentTagNames.forEach(function(name) {
                var tagData = componentTags[name],
                    $ul = tagData.$ul;

                if($ul.children('ul').length === 0) {
                    return;
                }

                $('body').append(tagData.$ul);
            });
        })();

        $('ul').each(function() {
            var $this = $(this);

            // Add list status (passed or failed) class.
            $this.addClass(
                $this.find('.failed').length === 0
                    ? 'passed'
                    : 'failed'
            );

            // Add list expand / collapse toggle.
            $this.prepend($('<button>').addClass('toggle active'));
        });

        // Setup list toggles click handler.
        $('body').on('click', '.toggle', function() {
            var $this = $(this),
                $listItems = $this.closest('ul').children('ul, li');

            $this.toggleClass('active');

            if($this.hasClass('active')) {
                $listItems.show();
            }
            else {
                $listItems.hide();
            }
        });

        // Collapse all lists.
        $('.toggle').click();

        // Count total steps.
        (function() {
            $('.tatTotalSteps').text($('li > a').length);

            $('.tatTotalPassed').text(
                $('li > .passed ~ a').length + ' ✓'
            );

            $('.tatTotalFailed').text(
                $('li > .failed ~ a').length + ' ✗'
            );
        })();
    }
</script>
